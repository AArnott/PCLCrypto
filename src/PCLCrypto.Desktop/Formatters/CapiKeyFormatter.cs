namespace PCLCrypto.Formatters
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using System.Security.Cryptography;
    using System.Text;

    internal class CapiKeyFormatter : KeyFormatter
    {
        protected override RSAParameters ReadCore(Stream stream)
        {
            byte[] keyBlob = new byte[stream.Length];
            stream.Read(keyBlob, 0, keyBlob.Length);
            var rsa = new RSACryptoServiceProvider();
            rsa.ImportCspBlob(keyBlob);
            return rsa.ExportParameters(!rsa.PublicOnly);
        }

        protected override void WriteCore(Stream stream, RSAParameters parameters)
        {
            VerifyCapiCompatibleParameters(parameters);
            var rsa = new RSACryptoServiceProvider();
            rsa.ImportParameters(parameters);
            byte[] keyBlob = rsa.ExportCspBlob(!rsa.PublicOnly);
            stream.Write(keyBlob, 0, keyBlob.Length);
        }

        private static void VerifyCapiCompatibleParameters(RSAParameters parameters)
        {
            // Only private keys have this restriction.
            if (HasPrivateKey(parameters))
            {
                int halfModulusLength = (parameters.Modulus.Length + 1) / 2;

                // These are the same assertions that Windows crypto lib itself
                // follows when it returns 'bad data'.
                // CAPI's file format does not include lengths for parameters.
                // Instead it makes some assumptions about their relative lengths
                // which make it fundamentally incompatible with some private keys
                // generated by iOS.
                VerifyFormat(
                    halfModulusLength == parameters.P.Length &&
                    halfModulusLength == parameters.Q.Length &&
                    halfModulusLength == parameters.DP.Length &&
                    halfModulusLength == parameters.DQ.Length &&
                    halfModulusLength == parameters.InverseQ.Length &&
                    parameters.Modulus.Length == parameters.D.Length, "Private key parameters have lengths that are not supported by CAPI.");
            }
        }
    }
}
